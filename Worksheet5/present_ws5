0. draw background:
	create a rectangle object (dimensions = dimensions of the frame);
	colour it gray;
	send it to the toDraw arraylist;
1. draw trees:
	read position & scale;
	create a triangle object (vertices defined relative, so as to allow for scaling and free positioning);
	colour it a nice green (default green awful);
	create a rectangle object for the trunk (vertices again relative, so will scale and relocate fine, all values cast to integers);
	colour trunk a decent brown;
2. draw baubles
	set baubles' colour random blue||red||yellow (Math.random() - 0.0 -> 0.33 -> 0.33-0.66 -> 0.66-1.0);
	define  bables' positions:
		randomize position on Y axis (Math.random()*max height);
		randomly define whether to push left or right on X axis;
		using the same Math.random() as for the Y axis, define the proportion of the max width/2 the bauble CAN be pushed aside = along sides of the triangle -> randomize THAT with another Math.random();
	draw as many baubles as defined;	
3. draw star
	randomize star's colour (Math.random() * 10 cast as an int -> 10 colours defined, picking them with switch-cases);
	define the centre of the star as the centre of the invisible circle drawn around the star: X = max_width/2, Y = 0 (relevant to christmas tree's bounding box);
	arrays needed to store the values are:
		1. an array to store the angles (I. 2*Math.PI/11; II. (2*Math.PI/11) + (2*Math.PI/11); III. II+(2*Math.PI/11), etc..)
		2. an array to store the X of the next vertix;
		3. an array to store the Y of the next vertix;
	define the angle between 2 sides of the triangle (3 vertices of which are: 1. centre of the triangle, 2: 1st point of star, 3: 2nd point of star);
		angle: 360/11 = 2*Math.PI() / 11 (need to count with rads);
		since we know 2 vertices of such an imaginary triangle, the 3rd vertix is located using basic trigonometry:
			cos angle returns the X of vertix#3;
			sin angle returns the Y of vertix#3;
	stars are drawn using drawLine, taking coordinates off the stars' vertices' arrays for Xs and Ys;